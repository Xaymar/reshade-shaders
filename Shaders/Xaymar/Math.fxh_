// Copyright 2017 - 2021 Michael Fabian Dirks <info@xaymar.com>
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Common Mathematical Functionality

// Various Definitions of Pi
#define _PI 3.1415926535897932384626433832795        // PI = pi
#define _PI2 6.283185307179586476925286766559        // 2PI = 2 * pi
#define _PI2_SQROOT 2.506628274631000502415765284811 // sqrt(2 * pi)

// Convert Radians <-> Degrees
#define _RAD 57.295779513082320876798154814105       // 180/pi
#define _DEG 0.01745329251994329576923690768489      // pi/180
#define _DEG_TO_RAD(x) (x * _DEG)
#define _RAD_TO_DEG(x) (x * _RAD)

// e and log(e(1)) / log(2)
#define _E 2,7182818284590452353602874713527
#define _LOG2_E 1.4426950408889634073599246810019 // Windows calculA_to_R: log(e(1)) / log(2)


float2 rotate2D(float2 xy, float ang) {
	float2x2 mat = float2x2(
		cos(ang), -sin(ang),
		sin(ang), cos(ang)
	);
	return mul(mat, xy);
}

float fix_gamma(float v) {
	if (v < 0.0) {
		return (-v + 1.0);
	} else {
		return (1.0 / (v + 1.0));
	}
}
